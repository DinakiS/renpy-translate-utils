const groupBy = require('lodash.groupby');

module.exports = {
  generateFile (data, options = {}) {
    const { language } = options;

    const lines = [];

    lines.push(`# Generated by renpy-translate-utils`);
    lines.push(`# Created at ${(new Date).toGMTString()}`);
    lines.push('');

    const grouppedData = groupBy(data, 'type');

    if (grouppedData.say) {
      grouppedData.say.forEach(block => {
        if (!block.meta || !block.meta.id) {
          throw new Error(`There is id in block.\r\n${JSON.stringify(block)}`);
        }
        if (block.meta && block.meta.source) {
          const { source } = block.meta;

          lines.push(`# ${source.file}:${source.line}`);
        }

        const setLang = language || block.meta.lang;

        lines.push(`translate ${setLang} ${block.meta.id}:`);
        lines.push('');

        const {
          who: origWho,
          what: origWhat
        } = block.original;

        lines.push(`    # ${origWho ? `${origWho} ` : ''}"${origWhat}"`);

        if (block.translated) {
          const {
            who,
            what
          } = block.translated;
  
          lines.push(`    ${who ? `${who} ` : ''}"${what}"`);
        } else {
          lines.push('    pass');
        }
        lines.push('');
      })
    }

    if (grouppedData.string) {
      const stringsByLang = groupBy(grouppedData.string, 'meta.lang');

      const languages = Object.keys(stringsByLang);

      languages.forEach(currentLang => {
        const blocks = stringsByLang[currentLang];

        lines.push(`translate ${language || currentLang} strings:`);
        lines.push('');

        blocks.forEach(block => {
          if (block.meta.source) {
            const { file, line } = block.meta.source;

            lines.push(`    # ${file}:${line}`);
          }

          const {
            original: { what: original },
            translated: { what: translated },
          } = block;

          lines.push(`    old "${original}"`);
          lines.push(`    new "${translated}"`);
          lines.push('');
        })
      })
    }

    const text = lines.join('\r\n');

    return text;
  }
}